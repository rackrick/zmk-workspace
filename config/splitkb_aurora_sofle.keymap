/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_de.h"

/* use helper macros to define left and right hand keys */

#include "zmk-helpers/key-labels/sofle.h"                                              // key-position labels
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 LB5 // right-hand keys
#define THUMBS LH4 LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3 RH4                                 // thumb keys

/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <35>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <29>; // Uncomment if using only per-key LEDs.
};
 */

/ {
    combos {
        compatible = "zmk,combos";

        combo_question {
            bindings = <&kp DE_QUESTION>;
            key-positions = <10 11>;
        };
    };

    behaviors {
        /* left-hand HRMs */

        hml: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hmr: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               |CTRL | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   | RALT |

            bindings = <
&kp ESC           &kp DE_N1          &kp DE_N2         &kp DE_N3        &kp DE_N4       &kp DE_N5                             &kp DE_N6  &kp DE_N7      &kp DE_N8         &kp DE_N9        &kp DE_N0                     &kp DE_SZ
&none             &kp Q              &kp W             &kp E            &kp R           &kp T                                 &kp Y      &kp U          &kp I             &kp O            &kp P                         &kp DE_U_UMLAUT
&kp TAB           &hml LEFT_SHIFT A  &hml LEFT_ALT S   &hml LEFT_GUI D  &hml LCTRL F    &kp G                                 &kp H      &hmr RCTRL J   &hmr RIGHT_GUI K  &hmr LEFT_ALT L  &hmr RIGHT_SHIFT DE_O_UMLAUT  &kp DE_A_UMLAUT
&kp LEFT_CONTROL  &kp Z              &kp X             &kp C            &kp V           &kp B           &none          &none  &kp N      &kp M          &kp DE_COMMA      &kp DE_DOT       &kp DE_MINUS                  &kp RSHFT
                                     &kp DE_LESS_THAN  &kp LALT         &lt 3 LEFT_GUI  &kp LEFT_SHIFT  &lt 1 ENTER    &mo 2  &kp SPACE  &kp BACKSPACE  &none             &kp RALT
            >;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&trans  &kp DE_EXCLAMATION   &kp DE_AT                &kp DE_SECT               &kp DE_PERCENT       &kp DE_AMPERSAND                        &none        &none   &none      &none      &kp DE_GRAVE  &kp DE_CARET
&trans  &kp DE_UNDERSCORE    &kp DE_LEFT_BRACE        &kp DE_RIGHT_BRACE        &kp DE_LEFT_BRACKET  &kp DE_RIGHT_BRACKET                    &kp DE_PLUS  &kp N7  &kp DE_N8  &kp DE_N9  &kp DE_ASTRK  &kp DE_QUESTION
&trans  &kp DE_SINGLE_QUOTE  &kp DE_LEFT_PARENTHESIS  &kp DE_RIGHT_PARENTHESIS  &kp DE_EQUAL         &kp DE_DOUBLE_QUOTES                    &kp COMMA    &kp N4  &kp N5     &kp N6     &kp N0        &kp DE_TILDE
&trans  &kp DE_LESS_THAN     &kp DE_GREATER_THAN      &kp DE_PIPE               &kp DE_SLASH         &kp DE_BACKSLASH      &trans    &trans  &kp DOT      &kp N1  &kp N2     &kp N3     &kp DE_MINUS  &kp DE_HASH
                             &trans                   &trans                    &trans               &trans                &trans    &trans  &trans       &trans  &trans     &trans
            >;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1   &bt BT_SEL 2  &bt BT_SEL 3   &bt BT_SEL 4                    &none          &none     &none         &none      &none       &studio_unlock
&trans      &none         &kp C_AL_CALC  &none         &kp LS(LG(S))  &none                           &kp PAGE_UP    &kp HOME  &kp UP_ARROW  &kp END    &kp INSERT  &none
&trans      &kp LC(Z)     &kp LC(X)      &kp LC(C)     &kp LC(V)      &kp CAPSLOCK                    &kp DELETE     &kp LEFT  &kp DOWN      &kp RIGHT  &none       &none
&trans      &none         &none          &none         &to 4          &to 5         &none     &none   &kp PAGE_DOWN  &none     &none         &none      &none       &trans
                          &trans         &trans        &trans         &trans        &trans    &trans  &trans         &trans    &trans        &trans
            >;
        };

        function_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                      &kp C_VOL_DN    &kp C_MUTE        &kp C_VOL_UP  &trans  &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                      &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT    &trans  &trans   &kp F12
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                      &kp F6          &kp F7            &kp F8        &kp F9  &kp F10  &kp F11
&trans  &trans  &trans  &trans  &trans  &kp LALT  &trans    &trans  &trans          &kp LA(F4)        &none         &none   &trans   &trans
                &trans  &trans  &trans  &trans    &trans    &trans  &trans          &trans            &trans        &trans
            >;
        };

        gaming_layer {
            bindings = <
&kp ESC           &kp DE_N1  &kp DE_N2         &kp DE_N3  &kp DE_N4  &kp DE_N5                  &kp DE_N6      &kp DE_N7  &kp DE_N8     &kp DE_N9   &kp DE_N0        &to 0
&kp TAB           &kp Q      &kp W             &kp E      &kp R      &kp T                      &kp Y          &kp U      &kp I         &kp O       &kp P            &kp DE_U_UMLAUT
&kp LEFT_SHIFT    &kp A      &kp S             &kp D      &kp F      &kp G                      &kp H          &kp J      &kp K         &kp L       &kp DE_O_UMLAUT  &kp DE_A_UMLAUT
&kp LEFT_CONTROL  &kp Z      &kp X             &kp C      &kp V      &kp B      &none    &none  &kp N          &kp M      &kp DE_COMMA  &kp DE_DOT  &kp DE_MINUS     &kp RSHFT
                             &kp DE_LESS_THAN  &kp LALT   &kp LGUI   &kp SPACE  &mo 1    &mo 2  &kp BACKSPACE  &kp ENTER  &to 0         &kp RALT
            >;
        };

        colemak {
            bindings = <
&kp ESC           &kp DE_N1          &kp DE_N2         &kp DE_N3           &kp DE_N4       &kp DE_N5                             &kp DE_N6  &kp DE_N7      &kp DE_N8         &kp DE_N9         &kp DE_N0           &kp DE_SZ
&kp TAB           &kp Q              &kp W             &kp F               &kp P           &kp B                                 &kp J      &kp L          &kp U             &kp Y             &kp DE_O_UMLAUT     &kp DE_U_UMLAUT
&kp LEFT_SHIFT    &hml LEFT_SHIFT A  &hml LEFT_ALT R   &hml LEFT_GUI DE_S  &hml LCTRL T    &kp G                                 &kp M      &hmr RCTRL N   &hmr RIGHT_GUI E  &hmr RIGHT_ALT I  &hmr RIGHT_SHIFT O  &kp DE_A_UMLAUT
&kp LEFT_CONTROL  &kp Z              &kp X             &kp C               &kp D           &kp V           &none          &none  &kp K      &kp H          &kp DE_COMMA      &kp DE_DOT        &kp DE_MINUS        &kp RSHFT
                                     &kp DE_LESS_THAN  &kp LALT            &lt 3 LEFT_GUI  &kp LEFT_SHIFT  &lt 1 ENTER    &mo 2  &kp SPACE  &kp BACKSPACE  &to 0             &kp RALT
            >;
        };
    };
};
